#! /usr/bin/env ruby
#--
# Copyright (c) 2010 Novell, Inc.
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, contact Novell, Inc.
#
# To contact Novell about this file by physical or electronic mail,
# you may find current contact information at www.novell.com
#++
require "optparse"
require 'rubygems'
require 'nokogiri'

class Resource
  attr_accessor :type, :title   # String
  attr_accessor :parameters     # Hash

  def initialize(type, title, parameters = {})
    @type, @title, @parameters = type, title, parameters
  end

  def to_s
    parameters_s = parameters.keys.sort.map{|k| "  #{k} => '#{parameters[k]}',\n"}.join ""

    "#{type} { '#{title}':\n#{parameters_s}}\n"
  end
end

output = nil
OptionParser.new do |opts|
  opts.on("-o", "--output FILENAME",
          "(defaults to image_name.pp)") do |fn| output = fn end
end.parse!

doc = Nokogiri::XML(File.open(ARGV[0]))
name = doc.at_xpath "/image/@name"

if output.nil?
  output = "#{name}.pp"
  $stderr.puts "Writing the output to #{output}"
end
if output == "-"
  out = $stdout
else
  out = File.open output, "w"
end

# redirect to output
out.puts "# Generated from #{ARGV[0]} (#{name})"
out.puts "# on #{Time.now}"
out.puts "# using kiwi2puppet: http://github.com/mvidner/kiwi2puppet"

packages = doc.at_xpath "/image/packages[@type='image']"
packages.xpath('package').each do |p|
  # http://docs.puppetlabs.com/guides/types/package.html
  r = Resource.new "package", p["name"], "ensure" => "present"
  out.print r
end
# 'warning: Found multiple default providers for package: gem, rpm; using gem'
out.puts "# do not prefer gem"
out.puts "Package { provider => 'rpm' }"

doc.xpath("/image/repository/source").each do |repo|
  # http://docs.puppetlabs.com/guides/types/yumrepo.html
#  repo_r = Resource.new "yumrepo", repo["path"], "baseurl" => repo["path"]
# This does not work, zypper repos are similar but not same as yum repos.
# Even this fails because we have a section inside the repo files
## mkdir /etc/yum
## echo '[main]' >> /etc/yum/yum.conf
## echo 'reposdir = /etc/zypp/repos.d' >> /etc/yum/yum.comf
# TODO Try with a new type (Could not find resource type zypprepo)
#  repo_r = Resource.new "zypprepo", repo["path"], "baseurl" => repo["path"]
#  out.print repo_r
end

# TODO TEST: get some complete kiwi profile,
# this is only from a Studio export
doc.xpath("/image/users").each do |group| # really, users==group
  # http://docs.puppetlabs.com/guides/types/group.html
  group_r = Resource.new "group", group["group"]
  out.print group_r
  group.xpath("user").each do |user|
    # http://docs.puppetlabs.com/guides/types/user.html
    user_r = Resource.new "user", user["name"], {
      "password" => user["pwd"], # but do we WANT to maintain the orig password?
      "gid" => group_r.title
    }
    if user["shell"]
      user_r.parameters["shell"] = user["shell"]
    end
    out.print user_r
  end
end
